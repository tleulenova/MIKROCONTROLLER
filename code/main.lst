CCS PCM C Compiler, Version 5.007, 61971               07-июн-21 16:19

               Filename:   C:\Users\ј€на “леуленова\Desktop\projecterm\code\main.lst

               ROM used:   1931 words (24%)
                           Largest free fragment is 2048
               RAM used:   29 (8%) at main() level
                           60 (16%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  05
0001:  MOVWF  0A
0002:  GOTO   535
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.3
0018:  GOTO   01B
0019:  BTFSC  0B.0
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   037
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
002F:  BCF    0A.0
0030:  BCF    0A.1
0031:  BCF    0A.2
0032:  ADDWF  02,F
0033:  RETLW  28
0034:  RETLW  0C
0035:  RETLW  01
0036:  RETLW  06
*
0058:  DATA 0C,29
0059:  DATA 65,33
005A:  DATA BD,12
005B:  DATA EC,3A
005C:  DATA 20,10
005D:  DATA 20,00
005E:  DATA 0A,28
005F:  DATA EF,39
0060:  DATA BD,12
0061:  DATA EC,3A
0062:  DATA 20,00
0063:  DATA D0,2B
0064:  DATA CD,1E
0065:  DATA 25,36
0066:  DATA 75,00
*
0101:  MOVLW  8E
0102:  MOVWF  77
0103:  MOVF   45,W
0104:  MOVWF  78
0105:  MOVF   44,W
0106:  MOVWF  79
0107:  CLRF   7A
0108:  MOVF   78,F
0109:  BTFSS  03.2
010A:  GOTO   115
010B:  MOVF   79,W
010C:  MOVWF  78
010D:  CLRF   79
010E:  MOVLW  08
010F:  SUBWF  77,F
0110:  MOVF   78,F
0111:  BTFSS  03.2
0112:  GOTO   115
0113:  CLRF   77
0114:  GOTO   11D
0115:  BCF    03.0
0116:  BTFSC  78.7
0117:  GOTO   11C
0118:  RLF    79,F
0119:  RLF    78,F
011A:  DECF   77,F
011B:  GOTO   115
011C:  BCF    78.7
011D:  RETURN
011E:  MOVF   44,W
011F:  BTFSC  03.2
0120:  GOTO   18E
0121:  MOVWF  4C
0122:  MOVF   48,W
0123:  BTFSC  03.2
0124:  GOTO   18E
0125:  ADDWF  4C,F
0126:  BTFSC  03.0
0127:  GOTO   12F
0128:  MOVLW  7F
0129:  SUBWF  4C,F
012A:  BTFSS  03.0
012B:  GOTO   18E
012C:  BTFSC  03.2
012D:  GOTO   18E
012E:  GOTO   133
012F:  MOVLW  81
0130:  ADDWF  4C,F
0131:  BTFSC  03.0
0132:  GOTO   18E
0133:  MOVF   4C,W
0134:  MOVWF  77
0135:  CLRF   78
0136:  CLRF   79
0137:  CLRF   7A
0138:  MOVF   45,W
0139:  MOVWF  50
013A:  BSF    50.7
013B:  MOVF   46,W
013C:  MOVWF  4F
013D:  MOVF   47,W
013E:  MOVWF  4E
013F:  MOVLW  18
0140:  MOVWF  4C
0141:  CLRF   4D
0142:  BTFSS  4E.0
0143:  GOTO   15C
0144:  MOVF   4B,W
0145:  ADDWF  7A,F
0146:  BTFSS  03.0
0147:  GOTO   14E
0148:  INCF   79,F
0149:  BTFSS  03.2
014A:  GOTO   14E
014B:  INCF   78,F
014C:  BTFSC  03.2
014D:  BSF    4D.7
014E:  MOVF   4A,W
014F:  ADDWF  79,F
0150:  BTFSS  03.0
0151:  GOTO   155
0152:  INCF   78,F
0153:  BTFSC  03.2
0154:  BSF    4D.7
0155:  MOVF   49,W
0156:  MOVWF  46
0157:  BSF    46.7
0158:  MOVF   46,W
0159:  ADDWF  78,F
015A:  BTFSC  03.0
015B:  BSF    4D.7
015C:  RLF    4D,F
015D:  RRF    78,F
015E:  RRF    79,F
015F:  RRF    7A,F
0160:  RRF    50,F
0161:  RRF    4F,F
0162:  RRF    4E,F
0163:  BCF    03.0
0164:  DECFSZ 4C,F
0165:  GOTO   141
0166:  MOVLW  01
0167:  ADDWF  77,F
0168:  BTFSC  03.0
0169:  GOTO   18E
016A:  BTFSC  78.7
016B:  GOTO   173
016C:  RLF    50,F
016D:  RLF    7A,F
016E:  RLF    79,F
016F:  RLF    78,F
0170:  DECF   77,F
0171:  BTFSC  03.2
0172:  GOTO   18E
0173:  BTFSS  50.7
0174:  GOTO   184
0175:  INCF   7A,F
0176:  BTFSS  03.2
0177:  GOTO   184
0178:  INCF   79,F
0179:  BTFSS  03.2
017A:  GOTO   184
017B:  INCF   78,F
017C:  BTFSS  03.2
017D:  GOTO   184
017E:  RRF    78,F
017F:  RRF    79,F
0180:  RRF    7A,F
0181:  INCF   77,F
0182:  BTFSC  03.2
0183:  GOTO   18E
0184:  MOVF   45,W
0185:  MOVWF  4D
0186:  MOVF   49,W
0187:  XORWF  4D,F
0188:  BTFSS  4D.7
0189:  GOTO   18C
018A:  BSF    78.7
018B:  GOTO   192
018C:  BCF    78.7
018D:  GOTO   192
018E:  CLRF   77
018F:  CLRF   78
0190:  CLRF   79
0191:  CLRF   7A
0192:  RETURN
0193:  MOVF   44,W
0194:  BTFSC  03.2
0195:  GOTO   258
0196:  MOVWF  50
0197:  MOVF   48,W
0198:  BTFSC  03.2
0199:  GOTO   258
019A:  SUBWF  50,F
019B:  BTFSS  03.0
019C:  GOTO   1A2
019D:  MOVLW  7F
019E:  ADDWF  50,F
019F:  BTFSC  03.0
01A0:  GOTO   258
01A1:  GOTO   1A8
01A2:  MOVLW  81
01A3:  SUBWF  50,F
01A4:  BTFSS  03.0
01A5:  GOTO   258
01A6:  BTFSC  03.2
01A7:  GOTO   258
01A8:  MOVF   50,W
01A9:  MOVWF  77
01AA:  CLRF   78
01AB:  CLRF   79
01AC:  CLRF   7A
01AD:  CLRF   4F
01AE:  MOVF   45,W
01AF:  MOVWF  4E
01B0:  BSF    4E.7
01B1:  MOVF   46,W
01B2:  MOVWF  4D
01B3:  MOVF   47,W
01B4:  MOVWF  4C
01B5:  MOVLW  19
01B6:  MOVWF  50
01B7:  MOVF   4B,W
01B8:  SUBWF  4C,F
01B9:  BTFSC  03.0
01BA:  GOTO   1CB
01BB:  MOVLW  01
01BC:  SUBWF  4D,F
01BD:  BTFSC  03.0
01BE:  GOTO   1CB
01BF:  SUBWF  4E,F
01C0:  BTFSC  03.0
01C1:  GOTO   1CB
01C2:  SUBWF  4F,F
01C3:  BTFSC  03.0
01C4:  GOTO   1CB
01C5:  INCF   4F,F
01C6:  INCF   4E,F
01C7:  INCF   4D,F
01C8:  MOVF   4B,W
01C9:  ADDWF  4C,F
01CA:  GOTO   1FD
01CB:  MOVF   4A,W
01CC:  SUBWF  4D,F
01CD:  BTFSC  03.0
01CE:  GOTO   1E6
01CF:  MOVLW  01
01D0:  SUBWF  4E,F
01D1:  BTFSC  03.0
01D2:  GOTO   1E6
01D3:  SUBWF  4F,F
01D4:  BTFSC  03.0
01D5:  GOTO   1E6
01D6:  INCF   4F,F
01D7:  INCF   4E,F
01D8:  MOVF   4A,W
01D9:  ADDWF  4D,F
01DA:  MOVF   4B,W
01DB:  ADDWF  4C,F
01DC:  BTFSS  03.0
01DD:  GOTO   1FD
01DE:  INCF   4D,F
01DF:  BTFSS  03.2
01E0:  GOTO   1FD
01E1:  INCF   4E,F
01E2:  BTFSS  03.2
01E3:  GOTO   1FD
01E4:  INCF   4F,F
01E5:  GOTO   1FD
01E6:  MOVF   49,W
01E7:  IORLW  80
01E8:  SUBWF  4E,F
01E9:  BTFSC  03.0
01EA:  GOTO   1FC
01EB:  MOVLW  01
01EC:  SUBWF  4F,F
01ED:  BTFSC  03.0
01EE:  GOTO   1FC
01EF:  INCF   4F,F
01F0:  MOVF   49,W
01F1:  IORLW  80
01F2:  ADDWF  4E,F
01F3:  MOVF   4A,W
01F4:  ADDWF  4D,F
01F5:  BTFSS  03.0
01F6:  GOTO   1DA
01F7:  INCF   4E,F
01F8:  BTFSS  03.2
01F9:  GOTO   1DA
01FA:  INCF   4F,F
01FB:  GOTO   1DA
01FC:  BSF    7A.0
01FD:  DECFSZ 50,F
01FE:  GOTO   200
01FF:  GOTO   20B
0200:  BCF    03.0
0201:  RLF    4C,F
0202:  RLF    4D,F
0203:  RLF    4E,F
0204:  RLF    4F,F
0205:  BCF    03.0
0206:  RLF    7A,F
0207:  RLF    79,F
0208:  RLF    78,F
0209:  RLF    51,F
020A:  GOTO   1B7
020B:  BTFSS  51.0
020C:  GOTO   213
020D:  BCF    03.0
020E:  RRF    78,F
020F:  RRF    79,F
0210:  RRF    7A,F
0211:  RRF    51,F
0212:  GOTO   216
0213:  DECF   77,F
0214:  BTFSC  03.2
0215:  GOTO   258
0216:  BTFSC  51.7
0217:  GOTO   23F
0218:  BCF    03.0
0219:  RLF    4C,F
021A:  RLF    4D,F
021B:  RLF    4E,F
021C:  RLF    4F,F
021D:  MOVF   4B,W
021E:  SUBWF  4C,F
021F:  BTFSC  03.0
0220:  GOTO   22B
0221:  MOVLW  01
0222:  SUBWF  4D,F
0223:  BTFSC  03.0
0224:  GOTO   22B
0225:  SUBWF  4E,F
0226:  BTFSC  03.0
0227:  GOTO   22B
0228:  SUBWF  4F,F
0229:  BTFSS  03.0
022A:  GOTO   24E
022B:  MOVF   4A,W
022C:  SUBWF  4D,F
022D:  BTFSC  03.0
022E:  GOTO   236
022F:  MOVLW  01
0230:  SUBWF  4E,F
0231:  BTFSC  03.0
0232:  GOTO   236
0233:  SUBWF  4F,F
0234:  BTFSS  03.0
0235:  GOTO   24E
0236:  MOVF   49,W
0237:  IORLW  80
0238:  SUBWF  4E,F
0239:  BTFSC  03.0
023A:  GOTO   23F
023B:  MOVLW  01
023C:  SUBWF  4F,F
023D:  BTFSS  03.0
023E:  GOTO   24E
023F:  INCF   7A,F
0240:  BTFSS  03.2
0241:  GOTO   24E
0242:  INCF   79,F
0243:  BTFSS  03.2
0244:  GOTO   24E
0245:  INCF   78,F
0246:  BTFSS  03.2
0247:  GOTO   24E
0248:  INCF   77,F
0249:  BTFSC  03.2
024A:  GOTO   258
024B:  RRF    78,F
024C:  RRF    79,F
024D:  RRF    7A,F
024E:  MOVF   45,W
024F:  MOVWF  50
0250:  MOVF   49,W
0251:  XORWF  50,F
0252:  BTFSS  50.7
0253:  GOTO   256
0254:  BSF    78.7
0255:  GOTO   25C
0256:  BCF    78.7
0257:  GOTO   25C
0258:  CLRF   77
0259:  CLRF   78
025A:  CLRF   79
025B:  CLRF   7A
025C:  RETURN
025D:  MOVLW  80
025E:  BTFSC  03.1
025F:  XORWF  49,F
0260:  CLRF   4E
0261:  CLRF   4F
0262:  MOVF   45,W
0263:  MOVWF  4D
0264:  MOVF   49,W
0265:  XORWF  4D,F
0266:  MOVF   44,W
0267:  BTFSC  03.2
0268:  GOTO   34D
0269:  MOVWF  4C
026A:  MOVWF  77
026B:  MOVF   48,W
026C:  BTFSC  03.2
026D:  GOTO   356
026E:  SUBWF  4C,F
026F:  BTFSC  03.2
0270:  GOTO   2F2
0271:  BTFSS  03.0
0272:  GOTO   2B0
0273:  MOVF   49,W
0274:  MOVWF  52
0275:  BSF    52.7
0276:  MOVF   4A,W
0277:  MOVWF  51
0278:  MOVF   4B,W
0279:  MOVWF  50
027A:  CLRF   4F
027B:  BCF    03.0
027C:  RRF    52,F
027D:  RRF    51,F
027E:  RRF    50,F
027F:  RRF    4F,F
0280:  DECFSZ 4C,F
0281:  GOTO   27A
0282:  BTFSS  4D.7
0283:  GOTO   287
0284:  BSF    4E.0
0285:  GOTO   36A
0286:  BCF    4E.0
0287:  BCF    4C.0
0288:  BSF    4E.4
0289:  MOVLW  47
028A:  MOVWF  04
028B:  BCF    03.7
028C:  GOTO   37F
028D:  BCF    4E.4
028E:  BTFSC  4D.7
028F:  GOTO   29A
0290:  BTFSS  4C.0
0291:  GOTO   2A5
0292:  RRF    52,F
0293:  RRF    51,F
0294:  RRF    50,F
0295:  RRF    4F,F
0296:  INCF   77,F
0297:  BTFSC  03.2
0298:  GOTO   365
0299:  GOTO   2A5
029A:  BTFSC  52.7
029B:  GOTO   2A8
029C:  BCF    03.0
029D:  RLF    4F,F
029E:  RLF    50,F
029F:  RLF    51,F
02A0:  RLF    52,F
02A1:  DECF   77,F
02A2:  BTFSC  03.2
02A3:  GOTO   365
02A4:  GOTO   29A
02A5:  BSF    4E.6
02A6:  GOTO   312
02A7:  BCF    4E.6
02A8:  MOVF   45,W
02A9:  MOVWF  4D
02AA:  BTFSS  4D.7
02AB:  GOTO   2AE
02AC:  BSF    52.7
02AD:  GOTO   35E
02AE:  BCF    52.7
02AF:  GOTO   35E
02B0:  MOVF   48,W
02B1:  MOVWF  4C
02B2:  MOVWF  77
02B3:  MOVF   44,W
02B4:  SUBWF  4C,F
02B5:  MOVF   45,W
02B6:  MOVWF  52
02B7:  BSF    52.7
02B8:  MOVF   46,W
02B9:  MOVWF  51
02BA:  MOVF   47,W
02BB:  MOVWF  50
02BC:  CLRF   4F
02BD:  BCF    03.0
02BE:  RRF    52,F
02BF:  RRF    51,F
02C0:  RRF    50,F
02C1:  RRF    4F,F
02C2:  DECFSZ 4C,F
02C3:  GOTO   2BC
02C4:  BTFSS  4D.7
02C5:  GOTO   2C9
02C6:  BSF    4E.1
02C7:  GOTO   36A
02C8:  BCF    4E.1
02C9:  BCF    4C.0
02CA:  BSF    4E.5
02CB:  MOVLW  4B
02CC:  MOVWF  04
02CD:  BCF    03.7
02CE:  GOTO   37F
02CF:  BCF    4E.5
02D0:  BTFSC  4D.7
02D1:  GOTO   2DC
02D2:  BTFSS  4C.0
02D3:  GOTO   2E7
02D4:  RRF    52,F
02D5:  RRF    51,F
02D6:  RRF    50,F
02D7:  RRF    4F,F
02D8:  INCF   77,F
02D9:  BTFSC  03.2
02DA:  GOTO   365
02DB:  GOTO   2E7
02DC:  BTFSC  52.7
02DD:  GOTO   2EA
02DE:  BCF    03.0
02DF:  RLF    4F,F
02E0:  RLF    50,F
02E1:  RLF    51,F
02E2:  RLF    52,F
02E3:  DECF   77,F
02E4:  BTFSC  03.2
02E5:  GOTO   365
02E6:  GOTO   2DC
02E7:  BSF    4E.7
02E8:  GOTO   312
02E9:  BCF    4E.7
02EA:  MOVF   49,W
02EB:  MOVWF  4D
02EC:  BTFSS  4D.7
02ED:  GOTO   2F0
02EE:  BSF    52.7
02EF:  GOTO   35E
02F0:  BCF    52.7
02F1:  GOTO   35E
02F2:  MOVF   49,W
02F3:  MOVWF  52
02F4:  BSF    52.7
02F5:  MOVF   4A,W
02F6:  MOVWF  51
02F7:  MOVF   4B,W
02F8:  MOVWF  50
02F9:  BTFSS  4D.7
02FA:  GOTO   2FF
02FB:  BCF    52.7
02FC:  BSF    4E.2
02FD:  GOTO   36A
02FE:  BCF    4E.2
02FF:  CLRF   4F
0300:  BCF    4C.0
0301:  MOVLW  47
0302:  MOVWF  04
0303:  BCF    03.7
0304:  GOTO   37F
0305:  BTFSC  4D.7
0306:  GOTO   328
0307:  MOVF   45,W
0308:  MOVWF  4D
0309:  BTFSS  4C.0
030A:  GOTO   312
030B:  RRF    52,F
030C:  RRF    51,F
030D:  RRF    50,F
030E:  RRF    4F,F
030F:  INCF   77,F
0310:  BTFSC  03.2
0311:  GOTO   365
0312:  BTFSS  4F.7
0313:  GOTO   323
0314:  INCF   50,F
0315:  BTFSS  03.2
0316:  GOTO   323
0317:  INCF   51,F
0318:  BTFSS  03.2
0319:  GOTO   323
031A:  INCF   52,F
031B:  BTFSS  03.2
031C:  GOTO   323
031D:  RRF    52,F
031E:  RRF    51,F
031F:  RRF    50,F
0320:  INCF   77,F
0321:  BTFSC  03.2
0322:  GOTO   365
0323:  BTFSC  4E.6
0324:  GOTO   2A7
0325:  BTFSC  4E.7
0326:  GOTO   2E9
0327:  GOTO   347
0328:  MOVLW  80
0329:  XORWF  52,F
032A:  BTFSS  52.7
032B:  GOTO   330
032C:  GOTO   36A
032D:  MOVF   49,W
032E:  MOVWF  4D
032F:  GOTO   33D
0330:  MOVF   45,W
0331:  MOVWF  4D
0332:  MOVF   52,F
0333:  BTFSS  03.2
0334:  GOTO   33D
0335:  MOVF   51,F
0336:  BTFSS  03.2
0337:  GOTO   33D
0338:  MOVF   50,F
0339:  BTFSS  03.2
033A:  GOTO   33D
033B:  CLRF   77
033C:  GOTO   35E
033D:  BTFSC  52.7
033E:  GOTO   347
033F:  BCF    03.0
0340:  RLF    4F,F
0341:  RLF    50,F
0342:  RLF    51,F
0343:  RLF    52,F
0344:  DECFSZ 77,F
0345:  GOTO   33D
0346:  GOTO   365
0347:  BTFSS  4D.7
0348:  GOTO   34B
0349:  BSF    52.7
034A:  GOTO   35E
034B:  BCF    52.7
034C:  GOTO   35E
034D:  MOVF   48,W
034E:  MOVWF  77
034F:  MOVF   49,W
0350:  MOVWF  52
0351:  MOVF   4A,W
0352:  MOVWF  51
0353:  MOVF   4B,W
0354:  MOVWF  50
0355:  GOTO   35E
0356:  MOVF   44,W
0357:  MOVWF  77
0358:  MOVF   45,W
0359:  MOVWF  52
035A:  MOVF   46,W
035B:  MOVWF  51
035C:  MOVF   47,W
035D:  MOVWF  50
035E:  MOVF   52,W
035F:  MOVWF  78
0360:  MOVF   51,W
0361:  MOVWF  79
0362:  MOVF   50,W
0363:  MOVWF  7A
0364:  GOTO   39D
0365:  CLRF   77
0366:  CLRF   78
0367:  CLRF   79
0368:  CLRF   7A
0369:  GOTO   39D
036A:  CLRF   4F
036B:  COMF   50,F
036C:  COMF   51,F
036D:  COMF   52,F
036E:  COMF   4F,F
036F:  INCF   4F,F
0370:  BTFSS  03.2
0371:  GOTO   378
0372:  INCF   50,F
0373:  BTFSS  03.2
0374:  GOTO   378
0375:  INCF   51,F
0376:  BTFSC  03.2
0377:  INCF   52,F
0378:  BTFSC  4E.0
0379:  GOTO   286
037A:  BTFSC  4E.1
037B:  GOTO   2C8
037C:  BTFSC  4E.2
037D:  GOTO   2FE
037E:  GOTO   32D
037F:  MOVF   00,W
0380:  ADDWF  50,F
0381:  BTFSS  03.0
0382:  GOTO   389
0383:  INCF   51,F
0384:  BTFSS  03.2
0385:  GOTO   389
0386:  INCF   52,F
0387:  BTFSC  03.2
0388:  BSF    4C.0
0389:  DECF   04,F
038A:  MOVF   00,W
038B:  ADDWF  51,F
038C:  BTFSS  03.0
038D:  GOTO   391
038E:  INCF   52,F
038F:  BTFSC  03.2
0390:  BSF    4C.0
0391:  DECF   04,F
0392:  MOVF   00,W
0393:  BTFSS  00.7
0394:  XORLW  80
0395:  ADDWF  52,F
0396:  BTFSC  03.0
0397:  BSF    4C.0
0398:  BTFSC  4E.4
0399:  GOTO   28D
039A:  BTFSC  4E.5
039B:  GOTO   2CF
039C:  GOTO   305
039D:  RETURN
039E:  MOVLW  8E
039F:  MOVWF  77
03A0:  MOVF   44,W
03A1:  SUBWF  77,F
03A2:  MOVF   45,W
03A3:  MOVWF  79
03A4:  MOVF   46,W
03A5:  MOVWF  78
03A6:  BSF    79.7
03A7:  MOVF   77,F
03A8:  BTFSC  03.2
03A9:  GOTO   3B5
03AA:  BCF    03.0
03AB:  MOVF   79,F
03AC:  BTFSS  03.2
03AD:  GOTO   3B1
03AE:  MOVF   78,F
03AF:  BTFSC  03.2
03B0:  GOTO   3B5
03B1:  RRF    79,F
03B2:  RRF    78,F
03B3:  DECFSZ 77,F
03B4:  GOTO   3AA
03B5:  BTFSS  45.7
03B6:  GOTO   3BC
03B7:  COMF   78,F
03B8:  COMF   79,F
03B9:  INCF   78,F
03BA:  BTFSC  03.2
03BB:  INCF   79,F
03BC:  RETURN
*
03E1:  CLRF   78
03E2:  CLRF   79
03E3:  CLRF   77
03E4:  CLRF   7A
03E5:  MOVF   45,W
03E6:  BTFSS  03.2
03E7:  GOTO   3EB
03E8:  MOVF   44,W
03E9:  BTFSC  03.2
03EA:  GOTO   405
03EB:  MOVLW  10
03EC:  MOVWF  46
03ED:  BCF    03.0
03EE:  RLF    42,F
03EF:  RLF    43,F
03F0:  RLF    77,F
03F1:  RLF    7A,F
03F2:  MOVF   45,W
03F3:  SUBWF  7A,W
03F4:  BTFSS  03.2
03F5:  GOTO   3F8
03F6:  MOVF   44,W
03F7:  SUBWF  77,W
03F8:  BTFSS  03.0
03F9:  GOTO   401
03FA:  MOVF   44,W
03FB:  SUBWF  77,F
03FC:  BTFSS  03.0
03FD:  DECF   7A,F
03FE:  MOVF   45,W
03FF:  SUBWF  7A,F
0400:  BSF    03.0
0401:  RLF    78,F
0402:  RLF    79,F
0403:  DECFSZ 46,F
0404:  GOTO   3ED
0405:  BCF    0A.3
0406:  BCF    0A.4
0407:  GOTO   6B0 (RETURN)
*
0410:  MOVLW  10
0411:  MOVWF  4A
0412:  CLRF   77
0413:  CLRF   7A
0414:  RRF    47,F
0415:  RRF    46,F
0416:  BTFSS  03.0
0417:  GOTO   41E
0418:  MOVF   48,W
0419:  ADDWF  77,F
041A:  BTFSC  03.0
041B:  INCF   7A,F
041C:  MOVF   49,W
041D:  ADDWF  7A,F
041E:  RRF    7A,F
041F:  RRF    77,F
0420:  RRF    79,F
0421:  RRF    78,F
0422:  DECFSZ 4A,F
0423:  GOTO   414
*
047E:  MOVF   0B,W
047F:  MOVWF  43
0480:  BCF    0B.7
0481:  BSF    03.5
0482:  BSF    03.6
0483:  BSF    0C.7
0484:  BSF    0C.0
0485:  NOP
0486:  NOP
0487:  BTFSC  03.0
0488:  GOTO   4B0
0489:  BCF    03.5
048A:  MOVF   0C,W
048B:  ANDLW  7F
048C:  BCF    03.6
048D:  MOVWF  44
048E:  BSF    03.6
048F:  MOVF   0D,W
0490:  BCF    03.6
0491:  MOVWF  45
0492:  BSF    03.6
0493:  MOVF   0F,W
0494:  BCF    03.6
0495:  MOVWF  46
0496:  MOVF   44,W
0497:  MOVWF  4B
0498:  CALL   452
0499:  MOVF   45,W
049A:  BSF    03.6
049B:  MOVWF  0D
049C:  BCF    03.6
049D:  MOVF   46,W
049E:  BSF    03.6
049F:  MOVWF  0F
04A0:  BSF    03.5
04A1:  BSF    0C.7
04A2:  BSF    0C.0
04A3:  NOP
04A4:  NOP
04A5:  BCF    03.5
04A6:  BCF    03.6
04A7:  DECFSZ 42,F
04A8:  GOTO   4AA
04A9:  GOTO   4AD
04AA:  BSF    03.5
04AB:  BSF    03.6
04AC:  GOTO   4B0
04AD:  GOTO   4CF
04AE:  BSF    03.5
04AF:  BSF    03.6
04B0:  BCF    03.5
04B1:  RLF    0C,W
04B2:  RLF    0E,W
04B3:  ANDLW  7F
04B4:  BCF    03.6
04B5:  MOVWF  44
04B6:  BSF    03.6
04B7:  MOVF   0D,W
04B8:  BCF    03.6
04B9:  MOVWF  45
04BA:  BSF    03.6
04BB:  MOVF   0F,W
04BC:  BCF    03.6
04BD:  MOVWF  46
04BE:  MOVF   44,W
04BF:  MOVWF  4B
04C0:  CALL   452
04C1:  MOVF   45,W
04C2:  BSF    03.6
04C3:  MOVWF  0D
04C4:  BCF    03.6
04C5:  MOVF   46,W
04C6:  BSF    03.6
04C7:  MOVWF  0F
04C8:  INCF   0D,F
04C9:  BTFSC  03.2
04CA:  INCF   0F,F
04CB:  BCF    03.0
04CC:  BCF    03.6
04CD:  DECFSZ 42,F
04CE:  GOTO   481
04CF:  BTFSC  43.7
04D0:  BSF    0B.7
04D1:  RETURN
04D2:  CLRF   4A
04D3:  MOVF   04,W
04D4:  MOVWF  49
04D5:  BCF    4A.0
04D6:  BTFSC  03.7
04D7:  BSF    4A.0
04D8:  SWAPF  43,W
04D9:  IORLW  F0
04DA:  MOVWF  45
04DB:  ADDWF  45,F
04DC:  ADDLW  E2
04DD:  MOVWF  46
04DE:  ADDLW  32
04DF:  MOVWF  48
04E0:  MOVF   43,W
04E1:  ANDLW  0F
04E2:  ADDWF  46,F
04E3:  ADDWF  46,F
04E4:  ADDWF  48,F
04E5:  ADDLW  E9
04E6:  MOVWF  47
04E7:  ADDWF  47,F
04E8:  ADDWF  47,F
04E9:  SWAPF  42,W
04EA:  ANDLW  0F
04EB:  ADDWF  47,F
04EC:  ADDWF  48,F
04ED:  RLF    47,F
04EE:  RLF    48,F
04EF:  COMF   48,F
04F0:  RLF    48,F
04F1:  MOVF   42,W
04F2:  ANDLW  0F
04F3:  ADDWF  48,F
04F4:  RLF    45,F
04F5:  MOVLW  07
04F6:  MOVWF  44
04F7:  MOVLW  0A
04F8:  ADDWF  48,F
04F9:  DECF   47,F
04FA:  BTFSS  03.0
04FB:  GOTO   4F8
04FC:  ADDWF  47,F
04FD:  DECF   46,F
04FE:  BTFSS  03.0
04FF:  GOTO   4FC
0500:  ADDWF  46,F
0501:  DECF   45,F
0502:  BTFSS  03.0
0503:  GOTO   500
0504:  ADDWF  45,F
0505:  DECF   44,F
0506:  BTFSS  03.0
0507:  GOTO   504
0508:  MOVLW  44
0509:  MOVWF  04
050A:  BCF    03.7
050B:  MOVLW  07
050C:  ANDWF  49,W
050D:  BCF    49.6
050E:  ADDWF  04,F
050F:  MOVLW  48
0510:  SUBWF  04,W
0511:  BTFSC  03.2
0512:  BSF    49.6
0513:  MOVF   00,W
0514:  MOVWF  77
0515:  BTFSS  03.2
0516:  GOTO   51F
0517:  BTFSC  49.6
0518:  GOTO   51F
0519:  BTFSC  49.4
051A:  GOTO   531
051B:  BTFSC  49.3
051C:  GOTO   51F
051D:  MOVLW  20
051E:  GOTO   522
051F:  BSF    49.3
0520:  BCF    49.4
0521:  MOVLW  30
0522:  ADDWF  77,F
0523:  CLRF   43
0524:  MOVF   04,W
0525:  MOVWF  42
0526:  BCF    43.0
0527:  BTFSC  03.7
0528:  BSF    43.0
0529:  MOVF   77,W
052A:  MOVWF  4B
052B:  CALL   452
052C:  MOVF   42,W
052D:  MOVWF  04
052E:  BCF    03.7
052F:  BTFSC  43.0
0530:  BSF    03.7
0531:  INCF   04,F
0532:  BTFSS  49.6
0533:  GOTO   50F
0534:  RETURN
....................  
.................... #list 
....................  
.................... #device adc=10 // set adc module conversion range as 10bit 
.................... #FUSES XT, NOWDT, NOPROTECT, NOBROWNOUT, NOLVP, NOPUT, NODEBUG, NOCPD 
.................... #use delay(crystal=4000000) 
*
0067:  MOVLW  4C
0068:  MOVWF  04
0069:  BCF    03.7
006A:  MOVF   00,W
006B:  BTFSC  03.2
006C:  GOTO   07B
006D:  MOVLW  01
006E:  MOVWF  78
006F:  CLRF   77
0070:  DECFSZ 77,F
0071:  GOTO   070
0072:  DECFSZ 78,F
0073:  GOTO   06F
0074:  MOVLW  4A
0075:  MOVWF  77
0076:  DECFSZ 77,F
0077:  GOTO   076
0078:  GOTO   079
0079:  DECFSZ 00,F
007A:  GOTO   06D
007B:  RETURN
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0094:  MOVLW  0F
0095:  BSF    03.5
0096:  ANDWF  08,W
0097:  IORLW  F0
0098:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0099:  BCF    03.5
009A:  BSF    08.2
....................    delay_cycles(1); 
009B:  NOP
....................    lcd_output_enable(1); 
009C:  BSF    08.0
....................    delay_cycles(1); 
009D:  NOP
....................    high = lcd_read_nibble(); 
009E:  CALL   088
009F:  MOVF   78,W
00A0:  MOVWF  53
....................        
....................    lcd_output_enable(0); 
00A1:  BCF    08.0
....................    delay_cycles(1); 
00A2:  NOP
....................    lcd_output_enable(1); 
00A3:  BSF    08.0
....................    delay_us(1); 
00A4:  NOP
....................    low = lcd_read_nibble(); 
00A5:  CALL   088
00A6:  MOVF   78,W
00A7:  MOVWF  52
....................        
....................    lcd_output_enable(0); 
00A8:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00A9:  MOVLW  0F
00AA:  BSF    03.5
00AB:  ANDWF  08,W
00AC:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00AD:  BCF    03.5
00AE:  SWAPF  53,W
00AF:  MOVWF  77
00B0:  MOVLW  F0
00B1:  ANDWF  77,F
00B2:  MOVF   77,W
00B3:  IORWF  52,W
00B4:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0088:  MOVF   08,W
0089:  MOVWF  77
008A:  SWAPF  08,W
008B:  ANDLW  0F
008C:  MOVWF  78
....................   #endif 
008D:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
007C:  SWAPF  53,W
007D:  ANDLW  F0
007E:  MOVWF  77
007F:  MOVLW  0F
0080:  ANDWF  08,W
0081:  IORWF  77,W
0082:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0083:  NOP
....................    lcd_output_enable(1); 
0084:  BSF    08.0
....................    delay_us(2); 
0085:  GOTO   086
....................    lcd_output_enable(0); 
0086:  BCF    08.0
0087:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
008E:  BSF    03.5
008F:  BCF    08.0
....................    lcd_rs_tris(); 
0090:  BCF    08.1
....................    lcd_rw_tris(); 
0091:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0092:  BCF    03.5
0093:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00B5:  MOVF   78,W
00B6:  MOVWF  52
00B7:  BTFSC  52.7
00B8:  GOTO   094
....................    lcd_output_rs(address); 
00B9:  BTFSS  50.0
00BA:  BCF    08.1
00BB:  BTFSC  50.0
00BC:  BSF    08.1
....................    delay_cycles(1); 
00BD:  NOP
....................    lcd_output_rw(0); 
00BE:  BCF    08.2
....................    delay_cycles(1); 
00BF:  NOP
....................    lcd_output_enable(0); 
00C0:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
00C1:  SWAPF  51,W
00C2:  MOVWF  52
00C3:  MOVLW  0F
00C4:  ANDWF  52,F
00C5:  MOVF   52,W
00C6:  MOVWF  53
00C7:  CALL   07C
....................    lcd_send_nibble(n & 0xf); 
00C8:  MOVF   51,W
00C9:  ANDLW  0F
00CA:  MOVWF  52
00CB:  MOVWF  53
00CC:  CALL   07C
00CD:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00CE:  MOVLW  0F
00CF:  BSF    03.5
00D0:  ANDWF  08,W
00D1:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
00D2:  BCF    08.0
....................    lcd_rs_tris(); 
00D3:  BCF    08.1
....................    lcd_rw_tris(); 
00D4:  BCF    08.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
00D5:  BCF    03.5
00D6:  BCF    08.1
....................    lcd_output_rw(0); 
00D7:  BCF    08.2
....................    lcd_output_enable(0); 
00D8:  BCF    08.0
....................      
....................    delay_ms(15); 
00D9:  MOVLW  0F
00DA:  MOVWF  4C
00DB:  CALL   067
....................    for(i=1;i<=3;++i) 
00DC:  MOVLW  01
00DD:  MOVWF  40
00DE:  MOVF   40,W
00DF:  SUBLW  03
00E0:  BTFSS  03.0
00E1:  GOTO   0EA
....................    { 
....................        lcd_send_nibble(3); 
00E2:  MOVLW  03
00E3:  MOVWF  53
00E4:  CALL   07C
....................        delay_ms(5); 
00E5:  MOVLW  05
00E6:  MOVWF  4C
00E7:  CALL   067
00E8:  INCF   40,F
00E9:  GOTO   0DE
....................    } 
....................     
....................    lcd_send_nibble(2); 
00EA:  MOVLW  02
00EB:  MOVWF  53
00EC:  CALL   07C
....................    delay_ms(5); 
00ED:  MOVLW  05
00EE:  MOVWF  4C
00EF:  CALL   067
....................    for(i=0;i<=3;++i) 
00F0:  CLRF   40
00F1:  MOVF   40,W
00F2:  SUBLW  03
00F3:  BTFSS  03.0
00F4:  GOTO   0FE
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00F5:  MOVF   40,W
00F6:  CALL   02F
00F7:  MOVWF  41
00F8:  CLRF   50
00F9:  MOVF   41,W
00FA:  MOVWF  51
00FB:  CALL   08E
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00FC:  INCF   40,F
00FD:  GOTO   0F1
00FE:  BCF    0A.3
00FF:  BCF    0A.4
0100:  GOTO   54C (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
0440:  DECFSZ 4D,W
0441:  GOTO   443
0442:  GOTO   446
....................       address=LCD_LINE_TWO; 
0443:  MOVLW  40
0444:  MOVWF  4E
0445:  GOTO   447
....................    else 
....................       address=0; 
0446:  CLRF   4E
....................       
....................    address+=x-1; 
0447:  MOVLW  01
0448:  SUBWF  4C,W
0449:  ADDWF  4E,F
....................    lcd_send_byte(0,0x80|address); 
044A:  MOVF   4E,W
044B:  IORLW  80
044C:  MOVWF  4F
044D:  CLRF   50
044E:  MOVF   4F,W
044F:  MOVWF  51
0450:  CALL   08E
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0451:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0452:  MOVF   4B,W
0453:  XORLW  07
0454:  BTFSC  03.2
0455:  GOTO   460
0456:  XORLW  0B
0457:  BTFSC  03.2
0458:  GOTO   465
0459:  XORLW  06
045A:  BTFSC  03.2
045B:  GOTO   46D
045C:  XORLW  02
045D:  BTFSC  03.2
045E:  GOTO   473
045F:  GOTO   478
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0460:  MOVLW  01
0461:  MOVWF  4C
0462:  MOVWF  4D
0463:  CALL   440
0464:  GOTO   47D
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0465:  CLRF   50
0466:  MOVLW  01
0467:  MOVWF  51
0468:  CALL   08E
....................                      delay_ms(2); 
0469:  MOVLW  02
046A:  MOVWF  4C
046B:  CALL   067
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
046C:  GOTO   47D
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
046D:  MOVLW  01
046E:  MOVWF  4C
046F:  MOVLW  02
0470:  MOVWF  4D
0471:  CALL   440
0472:  GOTO   47D
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0473:  CLRF   50
0474:  MOVLW  10
0475:  MOVWF  51
0476:  CALL   08E
0477:  GOTO   47D
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0478:  MOVLW  01
0479:  MOVWF  50
047A:  MOVF   4B,W
047B:  MOVWF  51
047C:  CALL   08E
....................      #endif 
....................    } 
047D:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... int8 last_read; //variable to check changing encoder value 
.................... signed int8 quad = 0; //variable to change position variable 
.................... #INT_RB // RB port interrupt on change 
.................... void RB_IOC_ISR(void) //interrupt function for every encoder read 
.................... { 
....................  int8 encoderRead; // variable to be used in motor encoder reading 
....................  clear_interrupt(INT_RB); 
*
0037:  BCF    0B.0
....................  encoderRead = input_b() & 0x30;  //reading the encoder input 
0038:  MOVLW  FF
0039:  BSF    03.5
003A:  MOVWF  06
003B:  BCF    03.5
003C:  MOVF   06,W
003D:  ANDLW  30
003E:  MOVWF  55
....................  if(encoderRead == last_read)     // check if the position is changed 
003F:  MOVF   27,W
0040:  SUBWF  55,W
0041:  BTFSC  03.2
....................   return;  // if the position is not changed ,do nothing 
0042:  GOTO   054
....................  //checking the direciton of the change 
....................  if(bit_test(encoderRead, 4) == bit_test(last_read, 5))  //to determine the rotation 
0043:  MOVLW  00
0044:  BTFSC  55.4
0045:  MOVLW  01
0046:  MOVWF  56
0047:  MOVLW  00
0048:  BTFSC  27.5
0049:  MOVLW  01
004A:  SUBWF  56,W
004B:  BTFSS  03.2
004C:  GOTO   050
....................   quad -= 1;       //if the rotation is ccw add one to quad variable 
004D:  MOVLW  01
004E:  SUBWF  28,F
004F:  GOTO   052
....................  else 
....................   quad += 1;       //if the rotation is cw subtract one from quad variable 
0050:  MOVLW  01
0051:  ADDWF  28,F
....................  last_read = encoderRead;    //store the latest read 
0052:  MOVF   55,W
0053:  MOVWF  27
0054:  BCF    0B.0
0055:  BCF    0A.3
0056:  BCF    0A.4
0057:  GOTO   01B
.................... } 
.................... int16 EncoderGet(void) { 
*
03BD:  CLRF   45
03BE:  CLRF   44
.................... //function for converting readed values to position change 
....................   signed int16 value = 0;          //reset the change to zero 
....................   //returning directional value 
....................   while(quad >= 4){    //if quad is 4, 1 pulse period is done in ccw direction 
03BF:  BTFSC  28.7
03C0:  GOTO   3CC
03C1:  MOVF   28,W
03C2:  SUBLW  03
03C3:  BTFSC  03.0
03C4:  GOTO   3CC
....................  
....................     value += 1;  //add 1 to value to store change in the number of pulses or angles 
03C5:  MOVLW  01
03C6:  ADDWF  44,F
03C7:  BTFSC  03.0
03C8:  INCF   45,F
....................     quad -= 4;   //reset quad to zero 
03C9:  MOVLW  04
03CA:  SUBWF  28,F
03CB:  GOTO   3BF
....................  
....................   } 
....................   while(quad <= -4){    //if quad is -4, 1 pulse period is done in cw direction 
03CC:  MOVF   28,W
03CD:  XORLW  80
03CE:  SUBLW  7C
03CF:  BTFSS  03.0
03D0:  GOTO   3DA
....................     value -= 1;         //subtract 1 from value to store change in the number of pulses of angles 
03D1:  MOVLW  01
03D2:  SUBWF  44,F
03D3:  MOVLW  00
03D4:  BTFSS  03.0
03D5:  MOVLW  01
03D6:  SUBWF  45,F
....................     quad += 4;      // reset quad to zero 
03D7:  MOVLW  04
03D8:  ADDWF  28,F
03D9:  GOTO   3CC
....................   } 
....................   return value;    // function returns the value of change in the angle 
03DA:  MOVF   44,W
03DB:  MOVWF  78
03DC:  MOVF   45,W
03DD:  MOVWF  79
03DE:  BCF    0A.3
03DF:  BCF    0A.4
03E0:  GOTO   661 (RETURN)
.................... } 
.................... int16 PWM(int16 a,int16 b) //function for calculating PWM value 
.................... { 
....................  signed int16 value; 
....................  value=a*b; //will get error and Kp values as inputs 
*
0408:  MOVF   41,W
0409:  MOVWF  47
040A:  MOVF   40,W
040B:  MOVWF  46
040C:  MOVF   43,W
040D:  MOVWF  49
040E:  MOVF   42,W
040F:  MOVWF  48
*
0424:  MOVF   78,W
0425:  MOVWF  44
0426:  MOVF   79,W
0427:  MOVWF  45
....................  //bounding the PWM value 
....................  if (value>1023) 
0428:  BTFSC  45.7
0429:  GOTO   434
042A:  MOVF   45,W
042B:  SUBLW  03
042C:  BTFSC  03.0
042D:  GOTO   434
....................   return 1023; 
042E:  MOVLW  FF
042F:  MOVWF  78
0430:  MOVLW  03
0431:  MOVWF  79
0432:  GOTO   43F
0433:  GOTO   43F
....................  else if (value<0) 
0434:  BTFSS  45.7
0435:  GOTO   43B
....................   return 0; 
0436:  MOVLW  00
0437:  MOVWF  78
0438:  MOVWF  79
0439:  GOTO   43F
043A:  GOTO   43F
....................  else 
....................   return value; 
043B:  MOVF   44,W
043C:  MOVWF  78
043D:  MOVF   45,W
043E:  MOVWF  79
043F:  RETURN
.................... } 
....................  
.................... void main() 
*
0535:  CLRF   28
0536:  MOVLW  FF
0537:  MOVWF  29
0538:  BSF    03.5
0539:  BSF    1F.0
053A:  BSF    1F.1
053B:  BSF    1F.2
053C:  BCF    1F.3
053D:  MOVLW  07
053E:  MOVWF  1C
053F:  BCF    03.7
0540:  MOVLW  1F
0541:  ANDWF  03,F
0542:  MOVLW  0A
0543:  BCF    03.5
0544:  MOVWF  2E
0545:  MOVLW  50
0546:  MOVWF  2F
0547:  CLRF   31
0548:  CLRF   30
0549:  CLRF   33
054A:  CLRF   32
.................... { 
....................  //variables 
....................  int16 refangle; 
....................  int16 analog_controller; 
....................  int default_kp = 10; 
....................  int V = 80; 
....................  int16 realPosition = 0;  
....................  int16 error = 0; 
....................   
....................  lcd_init(); 
054B:  GOTO   0CE
....................  delay_ms(10); 
054C:  MOVLW  0A
054D:  MOVWF  4C
054E:  CALL   067
....................  set_tris_c(0x00000000); //setting the outputs 
054F:  MOVLW  00
0550:  BSF    03.5
0551:  MOVWF  07
0552:  BCF    03.5
0553:  MOVWF  29
....................  output_c(0x00); 
0554:  MOVWF  29
0555:  BSF    03.5
0556:  CLRF   07
0557:  BCF    03.5
0558:  CLRF   07
....................   
....................  setup_ccp1(CCP_PWM); //setuping the PWM 
0559:  BCF    29.2
055A:  MOVF   29,W
055B:  BSF    03.5
055C:  MOVWF  07
055D:  BCF    03.5
055E:  BCF    07.2
055F:  MOVLW  0C
0560:  MOVWF  17
....................  setup_timer_2(T2_DIV_BY_16, 255, 1); 
0561:  MOVLW  00
0562:  MOVWF  78
0563:  IORLW  06
0564:  MOVWF  12
0565:  MOVLW  FF
0566:  BSF    03.5
0567:  MOVWF  12
....................   
....................  setup_adc_ports(AN0_AN1_AN3); //setuping the analog reading 
0568:  BCF    1F.0
0569:  BCF    1F.1
056A:  BSF    1F.2
056B:  BCF    1F.3
....................  setup_adc(ADC_CLOCK_DIV_32); 
056C:  BCF    1F.6
056D:  BCF    03.5
056E:  BCF    1F.6
056F:  BSF    1F.7
0570:  BSF    03.5
0571:  BSF    1F.7
0572:  BCF    03.5
0573:  BSF    1F.0
....................   
....................  enable_interrupts(INT_RB); 
0574:  BSF    0B.3
....................  enable_interrupts(GLOBAL); 
0575:  MOVLW  C0
0576:  IORWF  0B,F
....................  clear_interrupt(INT_RB); 
0577:  BCF    0B.0
....................  while(True) 
....................  { 
....................   //analog reading 
....................   set_adc_channel(0);  
0578:  MOVLW  00
0579:  MOVWF  78
057A:  MOVF   1F,W
057B:  ANDLW  C7
057C:  IORWF  78,W
057D:  MOVWF  1F
....................   delay_us(10); 
057E:  MOVLW  02
057F:  MOVWF  77
0580:  DECFSZ 77,F
0581:  GOTO   580
0582:  GOTO   583
0583:  NOP
....................   refangle = read_adc(); 
0584:  BSF    1F.2
0585:  BTFSC  1F.2
0586:  GOTO   585
0587:  BSF    03.5
0588:  MOVF   1E,W
0589:  BCF    03.5
058A:  MOVWF  2A
058B:  MOVF   1E,W
058C:  MOVWF  2B
....................   //converting readed value to wanted variable 
....................   int16 reference_angle =((float)refangle*250/1023)+20; 
058D:  MOVF   2B,W
058E:  MOVWF  45
058F:  MOVF   2A,W
0590:  MOVWF  44
0591:  CALL   101
0592:  MOVF   7A,W
0593:  MOVWF  43
0594:  MOVF   79,W
0595:  MOVWF  42
0596:  MOVF   78,W
0597:  MOVWF  41
0598:  MOVF   77,W
0599:  MOVWF  40
059A:  MOVF   7A,W
059B:  MOVWF  47
059C:  MOVF   79,W
059D:  MOVWF  46
059E:  MOVF   78,W
059F:  MOVWF  45
05A0:  MOVF   77,W
05A1:  MOVWF  44
05A2:  CLRF   4B
05A3:  CLRF   4A
05A4:  MOVLW  7A
05A5:  MOVWF  49
05A6:  MOVLW  86
05A7:  MOVWF  48
05A8:  CALL   11E
05A9:  MOVF   7A,W
05AA:  MOVWF  43
05AB:  MOVF   79,W
05AC:  MOVWF  42
05AD:  MOVF   78,W
05AE:  MOVWF  41
05AF:  MOVF   77,W
05B0:  MOVWF  40
05B1:  MOVF   7A,W
05B2:  MOVWF  47
05B3:  MOVF   79,W
05B4:  MOVWF  46
05B5:  MOVF   78,W
05B6:  MOVWF  45
05B7:  MOVF   77,W
05B8:  MOVWF  44
05B9:  CLRF   4B
05BA:  MOVLW  C0
05BB:  MOVWF  4A
05BC:  MOVLW  7F
05BD:  MOVWF  49
05BE:  MOVLW  88
05BF:  MOVWF  48
05C0:  CALL   193
05C1:  MOVF   7A,W
05C2:  MOVWF  43
05C3:  MOVF   79,W
05C4:  MOVWF  42
05C5:  MOVF   78,W
05C6:  MOVWF  41
05C7:  MOVF   77,W
05C8:  MOVWF  40
05C9:  BCF    03.1
05CA:  MOVF   7A,W
05CB:  MOVWF  47
05CC:  MOVF   79,W
05CD:  MOVWF  46
05CE:  MOVF   78,W
05CF:  MOVWF  45
05D0:  MOVF   77,W
05D1:  MOVWF  44
05D2:  CLRF   4B
05D3:  CLRF   4A
05D4:  MOVLW  20
05D5:  MOVWF  49
05D6:  MOVLW  83
05D7:  MOVWF  48
05D8:  CALL   25D
05D9:  MOVF   7A,W
05DA:  MOVWF  47
05DB:  MOVF   79,W
05DC:  MOVWF  46
05DD:  MOVF   78,W
05DE:  MOVWF  45
05DF:  MOVF   77,W
05E0:  MOVWF  44
05E1:  CALL   39E
05E2:  MOVF   79,W
05E3:  MOVWF  35
05E4:  MOVF   78,W
05E5:  MOVWF  34
....................   set_adc_channel(1); 
05E6:  MOVLW  08
05E7:  MOVWF  78
05E8:  MOVF   1F,W
05E9:  ANDLW  C7
05EA:  IORWF  78,W
05EB:  MOVWF  1F
....................   delay_us(10); 
05EC:  MOVLW  02
05ED:  MOVWF  77
05EE:  DECFSZ 77,F
05EF:  GOTO   5EE
05F0:  GOTO   5F1
05F1:  NOP
....................   analog_controller = read_adc(); 
05F2:  BSF    1F.2
05F3:  BTFSC  1F.2
05F4:  GOTO   5F3
05F5:  BSF    03.5
05F6:  MOVF   1E,W
05F7:  BCF    03.5
05F8:  MOVWF  2C
05F9:  MOVF   1E,W
05FA:  MOVWF  2D
....................   int16 control_gain = default_kp +  
....................   ((float)analog_controller/1023)*V; 
....................   
....................   long change = EncoderGet(); //getting position change from encoder 
05FB:  MOVF   2D,W
05FC:  MOVWF  45
05FD:  MOVF   2C,W
05FE:  MOVWF  44
05FF:  CALL   101
0600:  MOVF   7A,W
0601:  MOVWF  43
0602:  MOVF   79,W
0603:  MOVWF  42
0604:  MOVF   78,W
0605:  MOVWF  41
0606:  MOVF   77,W
0607:  MOVWF  40
0608:  MOVF   7A,W
0609:  MOVWF  47
060A:  MOVF   79,W
060B:  MOVWF  46
060C:  MOVF   78,W
060D:  MOVWF  45
060E:  MOVF   77,W
060F:  MOVWF  44
0610:  CLRF   4B
0611:  MOVLW  C0
0612:  MOVWF  4A
0613:  MOVLW  7F
0614:  MOVWF  49
0615:  MOVLW  88
0616:  MOVWF  48
0617:  CALL   193
0618:  MOVF   7A,W
0619:  MOVWF  43
061A:  MOVF   79,W
061B:  MOVWF  42
061C:  MOVF   78,W
061D:  MOVWF  41
061E:  MOVF   77,W
061F:  MOVWF  40
0620:  CLRF   45
0621:  MOVF   2F,W
0622:  MOVWF  44
0623:  CALL   101
0624:  MOVF   43,W
0625:  MOVWF  47
0626:  MOVF   42,W
0627:  MOVWF  46
0628:  MOVF   41,W
0629:  MOVWF  45
062A:  MOVF   40,W
062B:  MOVWF  44
062C:  MOVF   7A,W
062D:  MOVWF  4B
062E:  MOVF   79,W
062F:  MOVWF  4A
0630:  MOVF   78,W
0631:  MOVWF  49
0632:  MOVF   77,W
0633:  MOVWF  48
0634:  CALL   11E
0635:  MOVF   7A,W
0636:  MOVWF  43
0637:  MOVF   79,W
0638:  MOVWF  42
0639:  MOVF   78,W
063A:  MOVWF  41
063B:  MOVF   77,W
063C:  MOVWF  40
063D:  CLRF   45
063E:  MOVF   2E,W
063F:  MOVWF  44
0640:  CALL   101
0641:  BCF    03.1
0642:  MOVF   7A,W
0643:  MOVWF  47
0644:  MOVF   79,W
0645:  MOVWF  46
0646:  MOVF   78,W
0647:  MOVWF  45
0648:  MOVF   77,W
0649:  MOVWF  44
064A:  MOVF   43,W
064B:  MOVWF  4B
064C:  MOVF   42,W
064D:  MOVWF  4A
064E:  MOVF   41,W
064F:  MOVWF  49
0650:  MOVF   40,W
0651:  MOVWF  48
0652:  CALL   25D
0653:  MOVF   7A,W
0654:  MOVWF  47
0655:  MOVF   79,W
0656:  MOVWF  46
0657:  MOVF   78,W
0658:  MOVWF  45
0659:  MOVF   77,W
065A:  MOVWF  44
065B:  CALL   39E
065C:  MOVF   79,W
065D:  MOVWF  37
065E:  MOVF   78,W
065F:  MOVWF  36
0660:  GOTO   3BD
0661:  MOVF   79,W
0662:  MOVWF  39
0663:  MOVF   78,W
0664:  MOVWF  38
....................   if(change) 
0665:  MOVF   38,W
0666:  IORWF  39,W
0667:  BTFSC  03.2
0668:  GOTO   66F
....................   { 
....................    realPosition += change; //updating the position 
0669:  MOVF   38,W
066A:  ADDWF  30,F
066B:  MOVF   39,W
066C:  BTFSC  03.0
066D:  INCFSZ 39,W
066E:  ADDWF  31,F
....................   } 
....................   float rev = realPosition/360.0f; 
....................   int16 angle = ((int16)(rev*360))%360; 
066F:  MOVF   31,W
0670:  MOVWF  45
0671:  MOVF   30,W
0672:  MOVWF  44
0673:  CALL   101
0674:  MOVF   7A,W
0675:  MOVWF  47
0676:  MOVF   79,W
0677:  MOVWF  46
0678:  MOVF   78,W
0679:  MOVWF  45
067A:  MOVF   77,W
067B:  MOVWF  44
067C:  CLRF   4B
067D:  CLRF   4A
067E:  MOVLW  34
067F:  MOVWF  49
0680:  MOVLW  87
0681:  MOVWF  48
0682:  CALL   193
0683:  MOVF   7A,W
0684:  MOVWF  3D
0685:  MOVF   79,W
0686:  MOVWF  3C
0687:  MOVF   78,W
0688:  MOVWF  3B
0689:  MOVF   77,W
068A:  MOVWF  3A
068B:  MOVF   3D,W
068C:  MOVWF  47
068D:  MOVF   3C,W
068E:  MOVWF  46
068F:  MOVF   3B,W
0690:  MOVWF  45
0691:  MOVF   3A,W
0692:  MOVWF  44
0693:  CLRF   4B
0694:  CLRF   4A
0695:  MOVLW  34
0696:  MOVWF  49
0697:  MOVLW  87
0698:  MOVWF  48
0699:  CALL   11E
069A:  MOVF   7A,W
069B:  MOVWF  47
069C:  MOVF   79,W
069D:  MOVWF  46
069E:  MOVF   78,W
069F:  MOVWF  45
06A0:  MOVF   77,W
06A1:  MOVWF  44
06A2:  CALL   39E
06A3:  MOVF   79,W
06A4:  MOVWF  41
06A5:  MOVF   78,W
06A6:  MOVWF  40
06A7:  MOVF   79,W
06A8:  MOVWF  43
06A9:  MOVF   78,W
06AA:  MOVWF  42
06AB:  MOVLW  01
06AC:  MOVWF  45
06AD:  MOVLW  68
06AE:  MOVWF  44
06AF:  GOTO   3E1
06B0:  MOVF   77,W
06B1:  MOVWF  3E
06B2:  MOVF   7A,W
06B3:  MOVWF  3F
....................   //getting error direction and starting the motor and its velocity accordingly 
....................   if(angle<=reference_angle) 
06B4:  MOVF   3F,W
06B5:  SUBWF  35,W
06B6:  BTFSS  03.0
06B7:  GOTO   6EF
06B8:  BTFSS  03.2
06B9:  GOTO   6BE
06BA:  MOVF   3E,W
06BB:  SUBWF  34,W
06BC:  BTFSS  03.0
06BD:  GOTO   6EF
....................    { 
....................     error = reference_angle-angle; 
06BE:  MOVF   3E,W
06BF:  SUBWF  34,W
06C0:  MOVWF  32
06C1:  MOVF   35,W
06C2:  MOVWF  33
06C3:  MOVF   3F,W
06C4:  BTFSS  03.0
06C5:  INCFSZ 3F,W
06C6:  SUBWF  33,F
....................     set_pwm1_duty(PWM(control_gain,error)); 
06C7:  MOVF   37,W
06C8:  MOVWF  41
06C9:  MOVF   36,W
06CA:  MOVWF  40
06CB:  MOVF   33,W
06CC:  MOVWF  43
06CD:  MOVF   32,W
06CE:  MOVWF  42
06CF:  CALL   408
06D0:  MOVF   79,W
06D1:  MOVWF  41
06D2:  MOVF   78,W
06D3:  MOVWF  40
06D4:  RRF    41,F
06D5:  RRF    40,F
06D6:  RRF    41,F
06D7:  RRF    40,F
06D8:  RRF    41,F
06D9:  MOVF   40,W
06DA:  MOVWF  15
06DB:  RRF    41,F
06DC:  RRF    41,W
06DD:  ANDLW  30
06DE:  MOVWF  77
06DF:  MOVF   17,W
06E0:  ANDLW  CF
06E1:  IORWF  77,W
06E2:  MOVWF  17
....................     output_high(PIN_C0); 
06E3:  BCF    29.0
06E4:  MOVF   29,W
06E5:  BSF    03.5
06E6:  MOVWF  07
06E7:  BCF    03.5
06E8:  BSF    07.0
....................     output_low(PIN_C1); 
06E9:  BCF    29.1
06EA:  MOVF   29,W
06EB:  BSF    03.5
06EC:  MOVWF  07
06ED:  BCF    03.5
06EE:  BCF    07.1
....................    } 
....................   if(angle>reference_angle) 
06EF:  MOVF   35,W
06F0:  SUBWF  3F,W
06F1:  BTFSS  03.0
06F2:  GOTO   72A
06F3:  BTFSS  03.2
06F4:  GOTO   6F9
06F5:  MOVF   3E,W
06F6:  SUBWF  34,W
06F7:  BTFSC  03.0
06F8:  GOTO   72A
....................    { 
....................     error = angle-reference_angle; 
06F9:  MOVF   34,W
06FA:  SUBWF  3E,W
06FB:  MOVWF  32
06FC:  MOVF   3F,W
06FD:  MOVWF  33
06FE:  MOVF   35,W
06FF:  BTFSS  03.0
0700:  INCFSZ 35,W
0701:  SUBWF  33,F
....................     set_pwm1_duty(PWM(control_gain,error)); 
0702:  MOVF   37,W
0703:  MOVWF  41
0704:  MOVF   36,W
0705:  MOVWF  40
0706:  MOVF   33,W
0707:  MOVWF  43
0708:  MOVF   32,W
0709:  MOVWF  42
070A:  CALL   408
070B:  MOVF   79,W
070C:  MOVWF  41
070D:  MOVF   78,W
070E:  MOVWF  40
070F:  RRF    41,F
0710:  RRF    40,F
0711:  RRF    41,F
0712:  RRF    40,F
0713:  RRF    41,F
0714:  MOVF   40,W
0715:  MOVWF  15
0716:  RRF    41,F
0717:  RRF    41,W
0718:  ANDLW  30
0719:  MOVWF  77
071A:  MOVF   17,W
071B:  ANDLW  CF
071C:  IORWF  77,W
071D:  MOVWF  17
....................     output_low(PIN_C0); 
071E:  BCF    29.0
071F:  MOVF   29,W
0720:  BSF    03.5
0721:  MOVWF  07
0722:  BCF    03.5
0723:  BCF    07.0
....................     output_high(PIN_C1); 
0724:  BCF    29.1
0725:  MOVF   29,W
0726:  BSF    03.5
0727:  MOVWF  07
0728:  BCF    03.5
0729:  BSF    07.1
....................    } 
....................   //printing desired values on LCD 
....................   printf(lcd_putc, "\fRef=%lu   ", reference_angle); 
072A:  MOVLW  58
072B:  BSF    03.6
072C:  MOVWF  0D
072D:  MOVLW  00
072E:  MOVWF  0F
072F:  BCF    03.0
0730:  MOVLW  05
0731:  BCF    03.6
0732:  MOVWF  42
0733:  CALL   47E
0734:  MOVLW  10
0735:  MOVWF  04
0736:  MOVF   35,W
0737:  MOVWF  43
0738:  MOVF   34,W
0739:  MOVWF  42
073A:  CALL   4D2
073B:  MOVLW  20
073C:  MOVWF  4B
073D:  CALL   452
073E:  MOVLW  20
073F:  MOVWF  4B
0740:  CALL   452
0741:  MOVLW  20
0742:  MOVWF  4B
0743:  CALL   452
....................   printf(lcd_putc, "Kp=%lu", control_gain); 
0744:  MOVLW  4B
0745:  MOVWF  4B
0746:  CALL   452
0747:  MOVLW  70
0748:  MOVWF  4B
0749:  CALL   452
074A:  MOVLW  3D
074B:  MOVWF  4B
074C:  CALL   452
074D:  MOVLW  10
074E:  MOVWF  04
074F:  MOVF   37,W
0750:  MOVWF  43
0751:  MOVF   36,W
0752:  MOVWF  42
0753:  CALL   4D2
....................   printf(lcd_putc, "\nPos=%lu ", realPosition); 
0754:  MOVLW  5E
0755:  BSF    03.6
0756:  MOVWF  0D
0757:  MOVLW  00
0758:  MOVWF  0F
0759:  BCF    03.0
075A:  MOVLW  05
075B:  BCF    03.6
075C:  MOVWF  42
075D:  CALL   47E
075E:  MOVLW  10
075F:  MOVWF  04
0760:  MOVF   31,W
0761:  MOVWF  43
0762:  MOVF   30,W
0763:  MOVWF  42
0764:  CALL   4D2
0765:  MOVLW  20
0766:  MOVWF  4B
0767:  CALL   452
....................   printf(lcd_putc, "PWM=%lu",PWM(control_gain,error)); 
0768:  MOVF   37,W
0769:  MOVWF  41
076A:  MOVF   36,W
076B:  MOVWF  40
076C:  MOVF   33,W
076D:  MOVWF  43
076E:  MOVF   32,W
076F:  MOVWF  42
0770:  CALL   408
0771:  MOVF   79,W
0772:  MOVWF  41
0773:  MOVF   78,W
0774:  MOVWF  40
0775:  MOVLW  63
0776:  BSF    03.6
0777:  MOVWF  0D
0778:  MOVLW  00
0779:  MOVWF  0F
077A:  BCF    03.0
077B:  MOVLW  04
077C:  BCF    03.6
077D:  MOVWF  42
077E:  CALL   47E
077F:  MOVLW  10
0780:  MOVWF  04
0781:  MOVF   41,W
0782:  MOVWF  43
0783:  MOVF   40,W
0784:  MOVWF  42
0785:  CALL   4D2
....................   delay_ms(10); 
0786:  MOVLW  0A
0787:  MOVWF  4C
0788:  CALL   067
0789:  GOTO   578
....................   } 
.................... } 
078A:  SLEEP

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
